package de.uni_koblenz.ist.manesh.phd.case_studies.dspl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.Map;
import java.util.Set;

import org.junit.Test;

import de.uni_koblenz.ist.manesh.phd.case_studies.dspl.adaptation.LocationBasedAccessControlRulesRewriter;
import de.uni_koblenz.ist.manesh.phd.case_studies.dspl.entities.Person;
import de.uni_koblenz.ist.manesh.phd.case_studies.dspl.entities.Room;
import de.uni_koblenz.ist.manesh.phd.case_studies.dspl.entities.Room.RoomType;

/**
 * This JUnit class implements tests for the behavior of the
 * {@link LocationBasedAccessControlRulesRewriter} which plays the role of an
 * adaptation manager in our sample application.
 * 
 * @author Mahdi Derakhshanmanesh {manesh@uni-koblenz.de}
 * 
 */
public class LocationBasedAccessControlRulesRewriterTest {

	@Test(expected = IllegalArgumentException.class)
	public void testAdaptRulesForVIPWithIllegalParams() {
		LocationBasedAccessControlRulesRewriter.adaptRulesForVIP(null, null);
		// TODO cover more combinations.
	}

	@Test
	public void testAdaptRulesForVIPWithoutVIP() {
		final Map<String, Set<String>> rulesSampleData = TestDataGenerator
				.createSampleAccessRulesWithoutVIP();
		final Map<String, Set<String>> referenceData = TestDataGenerator
				.createSampleAccessRulesWithoutVIP();

		// Data set must be non-empty and no VIP shall be in the sample data.
		assertTrue(rulesSampleData != null);
		assertFalse(rulesSampleData.containsKey(Person.RoleType.VIP.name()));

		final Room dummyLocation = new Room(RoomType.IT_ROOM);
		LocationBasedAccessControlRulesRewriter.adaptRulesForVIP(
				rulesSampleData, dummyLocation);

		// The rules should be changed at this point.
		assertFalse(rulesSampleData.equals(referenceData));
		// VIP role should be in there.
		assertTrue(rulesSampleData.containsKey(Person.RoleType.VIP.name()));
		// Rule size must be exactly + 1.
		assertEquals(rulesSampleData.size(), referenceData.size() + 1);
	}

	@Test
	public void testAdaptRulesForVIPWithVIP() {
		fail("Not yet implemented");
	}

	@Test
	public void testResetAdaptationToDefault() {
		Map<String, Set<String>> rulesWithOutVIP = TestDataGenerator
				.createSampleAccessRulesWithoutVIP();
		Map<String, Set<String>> rulesWithVIP = TestDataGenerator
				.createSampleAccessRulesWithVIP();
		assertFalse(rulesWithOutVIP.equals(rulesWithVIP));

		LocationBasedAccessControlRulesRewriter
				.resetRulesToDefault(rulesWithVIP);
		// Reset method should represent the same data as generated by the
		// TestDataGenerator per default.
		assertTrue(rulesWithOutVIP.equals(rulesWithVIP));
	}

}
